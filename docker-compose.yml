version: '3.9'

x-airflow-common:
  &airflow-common
  # NEW: Build the custom Dockerfile with pre-installed dependencies
  build:
    context: .
    dockerfile: Dockerfile.airflow 
  
  environment:
    # AIRFLOW CORE
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: 'YOUR AIRFLOW__CORE__FERNET_KEY'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    # ML/MONITORING
    MLFLOW_TRACKING_URI: http://mlflow:5000
    SLACK_WEBHOOK_URL: '{{ var.value.slack_flood_alert }}'
    # DB VARIABLES (Used by Airflow DAGs and Streamlit)
    DB_HOST: postgres
    DB_NAME: name
    DB_USER: user
    DB_PASSWORD: PASSWORD
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./models:/opt/airflow/models
    - ./mlruns:/mlflow/artifacts
    - ./mlflow:/mlflow
  depends_on:
    - postgres
    - mlflow
    - fastapi 

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_db:/var/lib/postgresql/data
    ports:
      - "5432:5432" 

  # --- AIRFLOW SERVICES (Use custom image) ---
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    depends_on:
      - postgres
      - mlflow
    command: >
      bash -c "
        # Dependencies are pre-installed in the image
        airflow db init &&
        airflow users create --username admin --password admin --firstname  --lastname  --role Admin --email xyz@example.com
      "

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: airflow webserver # Simple startup command
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    depends_on:
      - postgres
      - mlflow
      - fastapi
    command: airflow scheduler # Simple startup command
  # --- END AIRFLOW SERVICES ---

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.14.2
    container_name: mlflow
    command: >
      mlflow server
      --backend-store-uri sqlite:///mlflow.db
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlflow/artifacts
      - ./mlflow:/mlflow

  # --- FASTAPI SERVICE ---
  fastapi:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: flood_api
    restart: always
    ports:
      - "8000:8000"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PROMETHEUS_ENDPOINT: /metrics
    volumes:
      - ./models:/app/models
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
    networks:
      default:
        aliases:
          - flood_api_monitor

  # --- STREAMLIT SERVICE (Database Connector) ---
  streamlit:
    build:
      context: ./streamlit_app
      dockerfile: Dockerfile
    container_name: flood_dashboard
    restart: always
    ports:
      - "8501:8501" 
    environment: 
      DB_HOST: postgres
      DB_NAME: airflow
      DB_USER: airflow
      DB_PASSWORD: airflow
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - fastapi
      - postgres 
      
  # --- MONITORING SERVICES ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - fastapi

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      
volumes:
  postgres_db:
  prometheus_data:
  grafana_data:
